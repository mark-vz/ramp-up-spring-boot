plugins {
    id 'org.springframework.boot' version "${springVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    maven {
        url = repositoryUrl
    }
}

dependencyManagement {
    dependencies {
        dependency 'org.springdoc:springdoc-openapi-ui:1.6.5'
        dependency 'io.swagger.core.v3:swagger-annotations:2.1.12'
        dependency 'org.liquibase:liquibase-core:4.7.1'

        // ----- Testing -----

        dependency "org.codehaus.groovy:groovy-sql:${groovyVersion}"
        dependency "org.codehaus.groovy:groovy-json:${groovyVersion}"

        dependencySet(group: 'org.spockframework', version: '2.0-groovy-3.0') {
            entry 'spock-core'
            entry 'spock-spring'
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Production-ready features, Metrics, Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    // OpenAPI + Swagger UI
    implementation 'org.springdoc:springdoc-openapi-ui'
    implementation 'io.swagger.core.v3:swagger-annotations'

    // ----- Testing -----

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')
        exclude(group: 'junit', module: 'junit')
    }

    // Groovy
    testImplementation 'org.codehaus.groovy:groovy-sql'
    testImplementation 'org.codehaus.groovy:groovy-json'

    // Spock
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-spring'
}

// ******
// Tests
// ******

tasks.named('test') {
    useJUnitPlatform()
}

// ******
// Jacoco - see also: https://docs.gradle.org/current/userguide/jacoco_plugin.html
// ******

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = layout.buildDirectory.dir("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("$buildDir/jacocoHtml")
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
