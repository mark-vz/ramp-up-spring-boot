plugins {
    id 'org.springframework.boot' version "${springVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.2.0'
}

group = 'com.example'
version = '0.0.1'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    }

    dependencies {
        dependency 'org.springdoc:springdoc-openapi-ui:1.6.5'
        dependency 'io.swagger.core.v3:swagger-annotations:2.1.12'
        dependency 'org.liquibase:liquibase-core:4.7.1'
        dependency 'com.github.ben-manes.caffeine:caffeine:3.0.5'

        // ----- Testing -----

        dependency "org.codehaus.groovy:groovy-sql:${groovyVersion}"
        dependency "org.codehaus.groovy:groovy-json:${groovyVersion}"

        dependencySet(group: 'org.spockframework', version: '2.0-groovy-3.0') {
            entry 'spock-core'
            entry 'spock-spring'
        }

        dependency "org.testcontainers:postgresql:${testcontainersVersion}"
    }
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Production-ready features, Metrics, Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    // Caching
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // OpenAPI + Swagger UI
    implementation 'org.springdoc:springdoc-openapi-ui'
    implementation 'io.swagger.core.v3:swagger-annotations'

    // ----- Testing -----

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')
        exclude(group: 'junit', module: 'junit')
    }

    // Groovy
    testImplementation 'org.codehaus.groovy:groovy-sql'
    testImplementation 'org.codehaus.groovy:groovy-json'

    // Spock
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-spring'

    // Testcontainers
    testImplementation 'org.testcontainers:postgresql'
    testImplementation(enforcedPlatform("org.testcontainers:testcontainers-bom:${testcontainersVersion}"))
    testImplementation("org.testcontainers:junit-jupiter")

    // REST-assured
    testImplementation("io.rest-assured:rest-assured")
}

// ******
// Tests
// ******

tasks.named('test') {
    useJUnitPlatform()
}

// ******
// Jacoco - see also: https://docs.gradle.org/current/userguide/jacoco_plugin.html
// ******

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = layout.buildDirectory.dir("$buildDir/reports/jacoco").get()
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("$buildDir/jacocoHtml")
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

// ******
// jib - see also: https://github.com/GoogleContainerTools/jib and https://plugins.gradle.org/plugin/com.google.cloud.tools.jib
// ******

jib {
    from {
        image = "${project.property('dockerRegistry')}/eclipse-temurin:17-jre-focal"
    }
    to {
        image = "$buildDir/${rootProject.name}"
        tags = ["${project.version}"/*, System.getProperty('docker.image.tag')*/]
    }
    extraDirectories {
        paths = file("$buildDir")
    }
    container {
        environment = [
                "JAVA_DISABLE_JMX"            : "true",
                "JAVA_META_SIZE_TO_HEAP_QUOTA": "30",
                "SYSTEM_MEMORY"               : "512",
                "SERVER_PORT"                 : "8080",
                "SERVICE_CLASSPATH"           : "/app/libs/*:/app/resources/:/app/classes/",
                "SPRING_CONFIG_LOCATION"      : "classpath:/config/",
                "SERVICE_MAIN_CLASS"          : project.getProperty('mainClassName')
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        entrypoint = ['INHERIT']
        // labels are now final and therefore cannot be set with the property access syntax
        labels.putAll(
                'maintainer': 'Mark Vz'
        )
        user = 'service'
    }
}

tasks.jib {
    doFirst {
        sourceSets['main'].runtimeClasspath = sourceSets['main'].runtimeClasspath.filter {
            !it.name.contains('spring-boot-devtools')
        }
    }
}

tasks.jib.dependsOn build
tasks.jibBuildTar.dependsOn build
tasks.jibDockerBuild.dependsOn build
